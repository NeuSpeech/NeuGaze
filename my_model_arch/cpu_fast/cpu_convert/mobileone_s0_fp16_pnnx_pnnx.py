# =============================================================================
# NeuSpeech Institute, NeuGaze Project
# Copyright (c) 2024 Yiqian Yang
#
# This code is part of the NeuGaze project developed at NeuSpeech Institute.
# Author: Yiqian Yang
#
# This work is licensed under the Creative Commons Attribution-NonCommercial 4.0 
# International License. To view a copy of this license, visit:
# http://creativecommons.org/licenses/by-nc/4.0/
# =============================================================================

import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
try:
    import torchvision
    import torchaudio
except:
    pass

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.stage0_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(3,3), out_channels=48, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.stage0_activation = nn.ReLU()
        self.stage1_0_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=48, in_channels=48, kernel_size=(3,3), out_channels=48, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.stage1_0_activation = nn.ReLU()
        self.stage1_1_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=48, kernel_size=(1,1), out_channels=48, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage1_1_activation = nn.ReLU()
        self.stage1_2_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=48, in_channels=48, kernel_size=(3,3), out_channels=48, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage1_2_activation = nn.ReLU()
        self.stage1_3_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=48, kernel_size=(1,1), out_channels=48, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage1_3_activation = nn.ReLU()
        self.stage2_0_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=48, in_channels=48, kernel_size=(3,3), out_channels=48, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.stage2_0_activation = nn.ReLU()
        self.stage2_1_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=48, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_1_activation = nn.ReLU()
        self.stage2_2_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_2_activation = nn.ReLU()
        self.stage2_3_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_3_activation = nn.ReLU()
        self.stage2_4_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_4_activation = nn.ReLU()
        self.stage2_5_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_5_activation = nn.ReLU()
        self.stage2_6_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_6_activation = nn.ReLU()
        self.stage2_7_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_7_activation = nn.ReLU()
        self.stage2_8_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_8_activation = nn.ReLU()
        self.stage2_9_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_9_activation = nn.ReLU()
        self.stage2_10_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_10_activation = nn.ReLU()
        self.stage2_11_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_11_activation = nn.ReLU()
        self.stage2_12_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_12_activation = nn.ReLU()
        self.stage2_13_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_13_activation = nn.ReLU()
        self.stage2_14_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage2_14_activation = nn.ReLU()
        self.stage2_15_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage2_15_activation = nn.ReLU()
        self.stage3_0_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.stage3_0_activation = nn.ReLU()
        self.stage3_1_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_1_activation = nn.ReLU()
        self.stage3_2_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_2_activation = nn.ReLU()
        self.stage3_3_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_3_activation = nn.ReLU()
        self.stage3_4_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_4_activation = nn.ReLU()
        self.stage3_5_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_5_activation = nn.ReLU()
        self.stage3_6_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_6_activation = nn.ReLU()
        self.stage3_7_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_7_activation = nn.ReLU()
        self.stage3_8_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_8_activation = nn.ReLU()
        self.stage3_9_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_9_activation = nn.ReLU()
        self.stage3_10_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_10_activation = nn.ReLU()
        self.stage3_11_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_11_activation = nn.ReLU()
        self.stage3_12_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_12_activation = nn.ReLU()
        self.stage3_13_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_13_activation = nn.ReLU()
        self.stage3_14_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_14_activation = nn.ReLU()
        self.stage3_15_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_15_activation = nn.ReLU()
        self.stage3_16_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_16_activation = nn.ReLU()
        self.stage3_17_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_17_activation = nn.ReLU()
        self.stage3_18_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.stage3_18_activation = nn.ReLU()
        self.stage3_19_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage3_19_activation = nn.ReLU()
        self.stage4_0_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.stage4_0_activation = nn.ReLU()
        self.stage4_1_reparam_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=1024, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.stage4_1_activation = nn.ReLU()
        self.gap = nn.AdaptiveAvgPool2d(output_size=(1,1))
        self.fc_yaw = nn.Linear(bias=True, in_features=1024, out_features=90)
        self.fc_pitch = nn.Linear(bias=True, in_features=1024, out_features=90)

        archive = zipfile.ZipFile('mobileone_s0_fp16_pnnx.pnnx.bin', 'r')
        self.stage0_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage0.reparam_conv.bias', (48), 'float32')
        self.stage0_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage0.reparam_conv.weight', (48,3,3,3), 'float32')
        self.stage1_0_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage1.0.reparam_conv.bias', (48), 'float32')
        self.stage1_0_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage1.0.reparam_conv.weight', (48,1,3,3), 'float32')
        self.stage1_1_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage1.1.reparam_conv.bias', (48), 'float32')
        self.stage1_1_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage1.1.reparam_conv.weight', (48,48,1,1), 'float32')
        self.stage1_2_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage1.2.reparam_conv.bias', (48), 'float32')
        self.stage1_2_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage1.2.reparam_conv.weight', (48,1,3,3), 'float32')
        self.stage1_3_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage1.3.reparam_conv.bias', (48), 'float32')
        self.stage1_3_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage1.3.reparam_conv.weight', (48,48,1,1), 'float32')
        self.stage2_0_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.0.reparam_conv.bias', (48), 'float32')
        self.stage2_0_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.0.reparam_conv.weight', (48,1,3,3), 'float32')
        self.stage2_1_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.1.reparam_conv.bias', (128), 'float32')
        self.stage2_1_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.1.reparam_conv.weight', (128,48,1,1), 'float32')
        self.stage2_2_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.2.reparam_conv.bias', (128), 'float32')
        self.stage2_2_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.2.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_3_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.3.reparam_conv.bias', (128), 'float32')
        self.stage2_3_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.3.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage2_4_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.4.reparam_conv.bias', (128), 'float32')
        self.stage2_4_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.4.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_5_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.5.reparam_conv.bias', (128), 'float32')
        self.stage2_5_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.5.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage2_6_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.6.reparam_conv.bias', (128), 'float32')
        self.stage2_6_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.6.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_7_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.7.reparam_conv.bias', (128), 'float32')
        self.stage2_7_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.7.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage2_8_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.8.reparam_conv.bias', (128), 'float32')
        self.stage2_8_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.8.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_9_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.9.reparam_conv.bias', (128), 'float32')
        self.stage2_9_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.9.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage2_10_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.10.reparam_conv.bias', (128), 'float32')
        self.stage2_10_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.10.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_11_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.11.reparam_conv.bias', (128), 'float32')
        self.stage2_11_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.11.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage2_12_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.12.reparam_conv.bias', (128), 'float32')
        self.stage2_12_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.12.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_13_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.13.reparam_conv.bias', (128), 'float32')
        self.stage2_13_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.13.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage2_14_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.14.reparam_conv.bias', (128), 'float32')
        self.stage2_14_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.14.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage2_15_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage2.15.reparam_conv.bias', (128), 'float32')
        self.stage2_15_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage2.15.reparam_conv.weight', (128,128,1,1), 'float32')
        self.stage3_0_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.0.reparam_conv.bias', (128), 'float32')
        self.stage3_0_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.0.reparam_conv.weight', (128,1,3,3), 'float32')
        self.stage3_1_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.1.reparam_conv.bias', (256), 'float32')
        self.stage3_1_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.1.reparam_conv.weight', (256,128,1,1), 'float32')
        self.stage3_2_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.2.reparam_conv.bias', (256), 'float32')
        self.stage3_2_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.2.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_3_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.3.reparam_conv.bias', (256), 'float32')
        self.stage3_3_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.3.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_4_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.4.reparam_conv.bias', (256), 'float32')
        self.stage3_4_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.4.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_5_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.5.reparam_conv.bias', (256), 'float32')
        self.stage3_5_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.5.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_6_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.6.reparam_conv.bias', (256), 'float32')
        self.stage3_6_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.6.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_7_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.7.reparam_conv.bias', (256), 'float32')
        self.stage3_7_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.7.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_8_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.8.reparam_conv.bias', (256), 'float32')
        self.stage3_8_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.8.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_9_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.9.reparam_conv.bias', (256), 'float32')
        self.stage3_9_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.9.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_10_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.10.reparam_conv.bias', (256), 'float32')
        self.stage3_10_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.10.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_11_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.11.reparam_conv.bias', (256), 'float32')
        self.stage3_11_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.11.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_12_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.12.reparam_conv.bias', (256), 'float32')
        self.stage3_12_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.12.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_13_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.13.reparam_conv.bias', (256), 'float32')
        self.stage3_13_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.13.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_14_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.14.reparam_conv.bias', (256), 'float32')
        self.stage3_14_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.14.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_15_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.15.reparam_conv.bias', (256), 'float32')
        self.stage3_15_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.15.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_16_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.16.reparam_conv.bias', (256), 'float32')
        self.stage3_16_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.16.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_17_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.17.reparam_conv.bias', (256), 'float32')
        self.stage3_17_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.17.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage3_18_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.18.reparam_conv.bias', (256), 'float32')
        self.stage3_18_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.18.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage3_19_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage3.19.reparam_conv.bias', (256), 'float32')
        self.stage3_19_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage3.19.reparam_conv.weight', (256,256,1,1), 'float32')
        self.stage4_0_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage4.0.reparam_conv.bias', (256), 'float32')
        self.stage4_0_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage4.0.reparam_conv.weight', (256,1,3,3), 'float32')
        self.stage4_1_reparam_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'stage4.1.reparam_conv.bias', (1024), 'float32')
        self.stage4_1_reparam_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'stage4.1.reparam_conv.weight', (1024,256,1,1), 'float32')
        self.fc_yaw.bias = self.load_pnnx_bin_as_parameter(archive, 'fc_yaw.bias', (90), 'float32')
        self.fc_yaw.weight = self.load_pnnx_bin_as_parameter(archive, 'fc_yaw.weight', (90,1024), 'float32')
        self.fc_pitch.bias = self.load_pnnx_bin_as_parameter(archive, 'fc_pitch.bias', (90), 'float32')
        self.fc_pitch.weight = self.load_pnnx_bin_as_parameter(archive, 'fc_pitch.weight', (90,1024), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        fd, tmppath = tempfile.mkstemp()
        with os.fdopen(fd, 'wb') as tmpf, archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0):
        v_1 = self.stage0_reparam_conv(v_0)
        v_2 = self.stage0_activation(v_1)
        v_3 = self.stage1_0_reparam_conv(v_2)
        v_4 = self.stage1_0_activation(v_3)
        v_5 = self.stage1_1_reparam_conv(v_4)
        v_6 = self.stage1_1_activation(v_5)
        v_7 = self.stage1_2_reparam_conv(v_6)
        v_8 = self.stage1_2_activation(v_7)
        v_9 = self.stage1_3_reparam_conv(v_8)
        v_10 = self.stage1_3_activation(v_9)
        v_11 = self.stage2_0_reparam_conv(v_10)
        v_12 = self.stage2_0_activation(v_11)
        v_13 = self.stage2_1_reparam_conv(v_12)
        v_14 = self.stage2_1_activation(v_13)
        v_15 = self.stage2_2_reparam_conv(v_14)
        v_16 = self.stage2_2_activation(v_15)
        v_17 = self.stage2_3_reparam_conv(v_16)
        v_18 = self.stage2_3_activation(v_17)
        v_19 = self.stage2_4_reparam_conv(v_18)
        v_20 = self.stage2_4_activation(v_19)
        v_21 = self.stage2_5_reparam_conv(v_20)
        v_22 = self.stage2_5_activation(v_21)
        v_23 = self.stage2_6_reparam_conv(v_22)
        v_24 = self.stage2_6_activation(v_23)
        v_25 = self.stage2_7_reparam_conv(v_24)
        v_26 = self.stage2_7_activation(v_25)
        v_27 = self.stage2_8_reparam_conv(v_26)
        v_28 = self.stage2_8_activation(v_27)
        v_29 = self.stage2_9_reparam_conv(v_28)
        v_30 = self.stage2_9_activation(v_29)
        v_31 = self.stage2_10_reparam_conv(v_30)
        v_32 = self.stage2_10_activation(v_31)
        v_33 = self.stage2_11_reparam_conv(v_32)
        v_34 = self.stage2_11_activation(v_33)
        v_35 = self.stage2_12_reparam_conv(v_34)
        v_36 = self.stage2_12_activation(v_35)
        v_37 = self.stage2_13_reparam_conv(v_36)
        v_38 = self.stage2_13_activation(v_37)
        v_39 = self.stage2_14_reparam_conv(v_38)
        v_40 = self.stage2_14_activation(v_39)
        v_41 = self.stage2_15_reparam_conv(v_40)
        v_42 = self.stage2_15_activation(v_41)
        v_43 = self.stage3_0_reparam_conv(v_42)
        v_44 = self.stage3_0_activation(v_43)
        v_45 = self.stage3_1_reparam_conv(v_44)
        v_46 = self.stage3_1_activation(v_45)
        v_47 = self.stage3_2_reparam_conv(v_46)
        v_48 = self.stage3_2_activation(v_47)
        v_49 = self.stage3_3_reparam_conv(v_48)
        v_50 = self.stage3_3_activation(v_49)
        v_51 = self.stage3_4_reparam_conv(v_50)
        v_52 = self.stage3_4_activation(v_51)
        v_53 = self.stage3_5_reparam_conv(v_52)
        v_54 = self.stage3_5_activation(v_53)
        v_55 = self.stage3_6_reparam_conv(v_54)
        v_56 = self.stage3_6_activation(v_55)
        v_57 = self.stage3_7_reparam_conv(v_56)
        v_58 = self.stage3_7_activation(v_57)
        v_59 = self.stage3_8_reparam_conv(v_58)
        v_60 = self.stage3_8_activation(v_59)
        v_61 = self.stage3_9_reparam_conv(v_60)
        v_62 = self.stage3_9_activation(v_61)
        v_63 = self.stage3_10_reparam_conv(v_62)
        v_64 = self.stage3_10_activation(v_63)
        v_65 = self.stage3_11_reparam_conv(v_64)
        v_66 = self.stage3_11_activation(v_65)
        v_67 = self.stage3_12_reparam_conv(v_66)
        v_68 = self.stage3_12_activation(v_67)
        v_69 = self.stage3_13_reparam_conv(v_68)
        v_70 = self.stage3_13_activation(v_69)
        v_71 = self.stage3_14_reparam_conv(v_70)
        v_72 = self.stage3_14_activation(v_71)
        v_73 = self.stage3_15_reparam_conv(v_72)
        v_74 = self.stage3_15_activation(v_73)
        v_75 = self.stage3_16_reparam_conv(v_74)
        v_76 = self.stage3_16_activation(v_75)
        v_77 = self.stage3_17_reparam_conv(v_76)
        v_78 = self.stage3_17_activation(v_77)
        v_79 = self.stage3_18_reparam_conv(v_78)
        v_80 = self.stage3_18_activation(v_79)
        v_81 = self.stage3_19_reparam_conv(v_80)
        v_82 = self.stage3_19_activation(v_81)
        v_83 = self.stage4_0_reparam_conv(v_82)
        v_84 = self.stage4_0_activation(v_83)
        v_85 = self.stage4_1_reparam_conv(v_84)
        v_86 = self.stage4_1_activation(v_85)
        v_87 = self.gap(v_86)
        v_88 = v_87.view(1, 1024)
        v_89 = self.fc_yaw(v_88)
        v_90 = self.fc_pitch(v_88)
        v_91 = (v_90, v_89, )
        return v_91

def export_torchscript():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 448, 448, dtype=torch.float)

    mod = torch.jit.trace(net, v_0)
    mod.save("mobileone_s0_fp16_pnnx_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 448, 448, dtype=torch.float)

    torch.onnx.export(net, v_0, "mobileone_s0_fp16_pnnx_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0'], output_names=['out0'])

@torch.no_grad()
def test_inference():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 448, 448, dtype=torch.float)

    return net(v_0)

if __name__ == "__main__":
    print(test_inference())
